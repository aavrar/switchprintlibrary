#!/usr/bin/env python3
"""
Context Window Optimization Demo

Comprehensive demonstration of the context window optimization features
for improved code-switching detection accuracy and performance.
"""

import time
from typing import List

from codeswitch_ai import (
    ContextWindowOptimizer, 
    ContextConfig, 
    TextType,
    GeneralCodeSwitchingDetector
)
from codeswitch_ai.detection.context_enhanced_detector import ContextEnhancedCSDetector


def demonstrate_text_type_classification():
    """Demonstrate automatic text type classification."""
    
    print("üìù TEXT TYPE CLASSIFICATION DEMO")
    print("=" * 50)
    
    optimizer = ContextWindowOptimizer()
    
    test_texts = [
        ("OMG amazing!", "Short social media"),
        ("Hello, ¬øc√≥mo est√°s today?", "Code-switching chat"),
        ("This is a longer document that discusses multilingual communication in business environments.", "Long document"),
        ("Well, I think we should go pero first", "Conversational"),
        ("The meeting will be in English but some t√©rminos will be in Spanish for clarity.", "Mixed content")
    ]
    
    for text, expected_category in test_texts:
        text_type = optimizer._classify_text_type(text)
        config = optimizer.context_configs[text_type]
        
        print(f"Text: \"{text}\"")
        print(f"  Classified as: {text_type.value}")
        print(f"  Window size: {config.window_size}")
        print(f"  Expected: {expected_category}")
        print()


def demonstrate_adaptive_window_sizing():
    """Demonstrate adaptive window sizing based on text characteristics."""
    
    print("üîß ADAPTIVE WINDOW SIZING DEMO")
    print("=" * 50)
    
    optimizer = ContextWindowOptimizer()
    
    test_cases = [
        ("Hi", "Very short"),
        ("Hello, ¬øc√≥mo est√°s?", "Short with code-switching"),
        ("I'm going to the mercado later to buy some groceries", "Medium length"),
        ("This is a much longer sentence that contains multiple complex ideas and technical terminology that requires careful analysis.", "Long and complex")
    ]
    
    for text, description in test_cases:
        words = text.split()
        text_type = optimizer._classify_text_type(text)
        config = optimizer.context_configs[text_type]
        
        adaptive_size = optimizer._calculate_adaptive_window_size(words, config)
        
        print(f"Text: \"{text}\"")
        print(f"  Description: {description}")
        print(f"  Word count: {len(words)}")
        print(f"  Text type: {text_type.value}")
        print(f"  Base window: {config.window_size}")
        print(f"  Adaptive window: {adaptive_size}")
        print(f"  Range: {config.min_window_size}-{config.max_window_size}")
        print()


def demonstrate_context_enhancement():
    """Demonstrate context-enhanced detection vs base detection."""
    
    print("üéØ CONTEXT ENHANCEMENT COMPARISON")
    print("=" * 50)
    
    # Create detectors
    base_detector = GeneralCodeSwitchingDetector(performance_mode="fast")
    enhanced_detector = ContextEnhancedCSDetector(
        performance_mode="fast",
        enable_context_optimization=True,
        context_optimization_threshold=0.05  # Lower threshold for demo
    )
    
    test_cases = [
        "Hello, ¬øc√≥mo est√°s? I hope you're doing bien today",
        "I need to go to the mercado to buy vegetables",
        "Yallah let's go, we're running late for the meeting",
        "Je suis tr√®s tired from all this work aujourd'hui",
        "Main ghar ja raha hoon but I'll be back very soon",
        "This is a simple English sentence without any switching"
    ]
    
    improvements = []
    
    for i, text in enumerate(test_cases, 1):
        print(f"{i}. \"{text}\"")
        
        # Base detection
        start_time = time.time()
        base_result = base_detector.detect_language(text)
        base_time = (time.time() - start_time) * 1000
        
        # Enhanced detection
        start_time = time.time()
        enhanced_result = enhanced_detector.detect_language(text)
        enhanced_time = (time.time() - start_time) * 1000
        
        print(f"   Base:     {base_result.detected_languages} (conf: {base_result.confidence:.3f}, time: {base_time:.1f}ms)")
        print(f"   Enhanced: {enhanced_result.detected_languages} (conf: {enhanced_result.confidence:.3f}, time: {enhanced_time:.1f}ms)")
        
        # Check if optimization was applied
        if enhanced_result.debug_info.get('context_optimization_applied'):
            improvement = enhanced_result.debug_info.get('improvement_score', 0)
            window_size = enhanced_result.debug_info.get('window_size', 'N/A')
            text_type = enhanced_result.debug_info.get('text_type', 'N/A')
            
            print(f"   ‚ú® Optimization: +{improvement:.3f} (window: {window_size}, type: {text_type})")
            improvements.append(improvement)
        else:
            reason = enhanced_result.debug_info.get('context_optimization_skipped', 'not applied')
            print(f"   ‚ûñ No optimization: {reason}")
            improvements.append(0.0)
        
        print(f"   Switch points: {len(base_result.switch_points)} ‚Üí {len(enhanced_result.switch_points)}")
        print()
    
    # Summary
    optimization_count = sum(1 for imp in improvements if imp > 0)
    avg_improvement = sum(improvements) / len(improvements) if improvements else 0
    
    print(f"üìä Enhancement Summary:")
    print(f"   Optimizations applied: {optimization_count}/{len(test_cases)}")
    print(f"   Average improvement: {avg_improvement:+.3f}")
    print(f"   Max improvement: {max(improvements):+.3f}")


def demonstrate_window_size_benchmarking():
    """Demonstrate window size benchmarking functionality."""
    
    print("üèÅ WINDOW SIZE BENCHMARKING DEMO")
    print("=" * 50)
    
    optimizer = ContextWindowOptimizer()
    
    # Test texts covering different scenarios
    benchmark_texts = [
        "Hello world",
        "Hola, ¬øc√≥mo est√°s?",
        "I'm going to the mercado",
        "Yallah let's go now",
        "Je suis tr√®s tired today",
        "Main ghar ja raha hoon",
        "This is a longer English sentence for testing",
        "Buenos d√≠as everyone, hope you're doing bien"
    ]
    
    print(f"üìù Benchmarking on {len(benchmark_texts)} texts")
    print("   Window sizes: [3, 5, 7, 10]")
    print()
    
    # Run benchmark
    start_time = time.time()
    results = optimizer.benchmark_window_sizes(
        benchmark_texts, 
        window_sizes=[3, 5, 7, 10]
    )
    benchmark_time = time.time() - start_time
    
    print(f"‚è±Ô∏è Benchmark completed in {benchmark_time:.2f}s")
    print()
    print("üìä Results by window size:")
    
    for window, metrics in results['results'].items():
        print(f"   {window}:")
        print(f"     Improvement: {metrics['avg_improvement_score']:+.3f}")
        print(f"     Time: {metrics['avg_processing_time_ms']:.1f}ms")
        print(f"     Efficiency: {metrics['efficiency_score']:.3f}")
    
    print(f"\nüèÜ Best configuration: {results['best_config']}")
    best_metrics = results['best_metrics']
    print(f"   Best efficiency: {best_metrics['efficiency_score']:.3f}")
    print(f"   Best improvement: {best_metrics['avg_improvement_score']:+.3f}")


def demonstrate_performance_statistics():
    """Demonstrate performance statistics tracking."""
    
    print("üìà PERFORMANCE STATISTICS DEMO")
    print("=" * 50)
    
    enhanced_detector = ContextEnhancedCSDetector(
        performance_mode="fast",
        enable_context_optimization=True,
        context_optimization_threshold=0.1
    )
    
    # Process some texts to generate statistics
    test_texts = [
        "Hello, ¬øc√≥mo est√°s? I hope you're doing bien",
        "I'm going to the mercado later",
        "This is a simple English sentence",
        "Yallah let's go, we're late",
        "Je suis tr√®s tired aujourd'hui",
        "Main ghar ja raha hoon but I'll be back"
    ]
    
    print(f"üìù Processing {len(test_texts)} texts to generate statistics...")
    
    for text in test_texts:
        enhanced_detector.detect_language(text)
    
    # Get statistics
    stats = enhanced_detector.get_context_stats()
    
    print("\nüìä Detection Statistics:")
    print(f"   Total detections: {stats['total_detections']}")
    print(f"   Optimizations used: {stats['context_optimizations_used']}")
    print(f"   Optimization rate: {stats['optimization_rate']:.1%}")
    print(f"   Average improvement: {stats['avg_improvement']:+.3f}")
    print(f"   Average optimization time: {stats['avg_optimization_time']*1000:.1f}ms")
    
    if 'optimizer_stats' in stats:
        opt_stats = stats['optimizer_stats']
        print(f"\nüìä Optimizer Statistics:")
        print(f"   Total optimizations: {opt_stats['total_optimizations']}")
        print(f"   Improvement rate: {opt_stats['improvement_rate']:.1%}")


def demonstrate_configuration_modes():
    """Demonstrate different detector mode configurations."""
    
    print("‚öôÔ∏è DETECTOR MODE CONFIGURATION DEMO")
    print("=" * 50)
    
    modes = ["code_switching", "monolingual", "multilingual"]
    test_text = "Hello, ¬øc√≥mo est√°s? I hope you're doing bien today"
    
    for mode in modes:
        print(f"üîß Testing {mode} mode:")
        
        detector = ContextEnhancedCSDetector(
            performance_mode="fast",
            detector_mode=mode,
            enable_context_optimization=True
        )
        
        # Configure optimization for this mode
        detector.enable_context_optimization_for_mode(mode)
        
        result = detector.detect_language(test_text)
        
        print(f"   Languages: {result.detected_languages}")
        print(f"   Confidence: {result.confidence:.3f}")
        print(f"   Optimization threshold: {detector.context_optimization_threshold}")
        
        optimization_applied = result.debug_info.get('context_optimization_applied', False)
        print(f"   Optimization applied: {optimization_applied}")
        print()


def main():
    """Run comprehensive context optimization demonstration."""
    
    print("üéØ CONTEXT WINDOW OPTIMIZATION COMPREHENSIVE DEMO")
    print("=" * 70)
    print("Showcasing adaptive context window optimization for code-switching detection")
    print()
    
    try:
        # Run all demonstrations
        demonstrate_text_type_classification()
        print("\n" + "="*70 + "\n")
        
        demonstrate_adaptive_window_sizing()
        print("\n" + "="*70 + "\n")
        
        demonstrate_context_enhancement()
        print("\n" + "="*70 + "\n")
        
        demonstrate_window_size_benchmarking()
        print("\n" + "="*70 + "\n")
        
        demonstrate_performance_statistics()
        print("\n" + "="*70 + "\n")
        
        demonstrate_configuration_modes()
        
        print("üéâ DEMO COMPLETE!")
        print("=" * 50)
        print("‚úÖ All context optimization features demonstrated successfully")
        print("üìà Adaptive window sizing working correctly")
        print("üéØ Context-enhanced detection providing improved accuracy")
        print("üöÄ Ready for production use with optimal configurations")
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        raise


if __name__ == "__main__":
    main()